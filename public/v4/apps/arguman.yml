captainVersion: 4

services:
  # $$cap_appname-redis:
  #   image: redis:latest
  #   restart: always

  $$cap_appname-mongodb:
    image: mongo:$$cap_mongo_version
    volumes:
      - $$cap_appname-db-data:/data/db
    restart: always
    # ports:
    #   - '27017:27017'
    caproverExtra:
      notExposeAsWebApp: 'true'
  $$cap_appname-db:
    image: postgres:$$cap_POSTGRES_VERSION
    environment:
      POSTGRES_DB: $$cap_POSTGRES_DB
      POSTGRES_PASSWORD: $$cap_POSTGRES_PASSWORD
      POSTGRES_USER: $$cap_POSTGRES_USER
    volumes:
      - $$cap_appname-db:/var/lib/postgresql/data
    caproverExtra:
      notExposeAsWebApp: 'true'

  $$cap_appname:
    #   - $$cap_appname-redis
    depends_on:
      - $$cap_appname-mongodb
      - $$cap_appname-db
    restart: always
    #environment:
      #https://stackoverflow.com/questions/31746182/docker-compose-wait-for-container-x-before-starting-y
      ## Add the wait script to the image
      #to add to docker to wait COPY --from=ghcr.io/ufoscout/docker-compose-wait:latest /wait /wait
      #WAIT_HOSTS: srv-captain--$$cap_appname-mongodb:27017
      # WAIT_HOSTS: srv-captain--arg-44-mongodb
    environment:
      - DEFAULT_FROM_EMAIL=new_email@example.com
      - POSTMARK_TOKEN=new_token
      - POSTMARK_API_URL=https://new.api.url
      - DB_ENGINE=django.db.backends.postgresql_psycopg2
      - DB_NAME=new_db_name
      - DB_USER=new_db_user
      - DB_PASSWORD=new_db_password
      - DB_HOST=new_db_host
      - DB_PORT=5432
      - ALLOWED_HOSTS=localhost,example.com
      - DEBUG=False
      - SERVER_EMAIL=server_email@example.com
      - BASE_DOMAIN=new_domain:8000
      - MONGODB_HOST=new_mongodb_host
      - CACHE_BACKEND=new_cache_backend
      - CACHE_LOCATION=new_cache_location
    caproverExtra:
      #dockerFilepath: arguman/Dockerfile
      # see https://github.com/caprover/one-click-apps/blob/master/public/v4/apps/pocketbase.yml
      dockerfileLines:
        - "# syntax=docker/dockerfile:1.3-labs"
        - FROM python:2.7-slim
        - WORKDIR /app
        # - >-
        #     CMD gotenberg
        #     --api-port=$API_PORT
        #     --api-timeout=$API_TIMEOUT
        #- RUN echo '#!/bin/bash\nprintenv\nexec /usr/local/bin/gost -L=tcp://:80/$TARGET_SERVER_IP:$TARGET_SERVER_NONSSL_PORT -L=tcp://:443/$TARGET_SERVER_IP:$TARGET_SERVER_SSL_PORT' > /start.sh
        - >- #when yaml is read this will remove all end of lines from this string. Also all subsequent lines MUST start aligned to RUN (otherwise yml will think it is a new key)
            RUN apt-get update && apt-get install -y git python-dev
            build-essential
            libpq-dev
            && rm -rf /var/lib/apt/lists/*
        - >-
            RUN
            git clone https://github.com/arguman/arguman.org.git . &&
            ls -al .
        - RUN pip install -r requirements.txt
        - RUN python -m textblob.download_corpora
        - >-
          RUN echo "
          import os EOL
          # see https://github.com/arguman/arguman.org/blob/master/web/main/settings_local.py.ex EOL
          DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'info@arguman.org') EOL
          POSTMARK_TOKEN = os.getenv('POSTMARK_TOKEN', 'xyz') EOL
          POSTMARK_API_URL = os.getenv('POSTMARK_API_URL', 'https://api.postmarkapp.com/email') EOL
          # EOL
          # EOL
          DATABASES = { EOL
          'default': { EOL
          'ENGINE': os.getenv('DB_ENGINE', 'django.db.backends.postgresql_psycopg2'), EOL
          'NAME': os.getenv('DB_NAME', 'postgres'), EOL
          'USER': os.getenv('DB_USER', 'postgres'), EOL
          'PASSWORD': os.getenv('DB_PASSWORD', ''), EOL
          'HOST': os.getenv('DB_HOST', 'db'), EOL
          'PORT': int(os.getenv('DB_PORT', 5432)), EOL
          } EOL
          } EOL
          ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '*').split(',') EOL
          DEBUG = os.getenv('DEBUG', 'True') == 'True' EOL
          # EOL
          SERVER_EMAIL = os.getenv('SERVER_EMAIL', 'info@arguman.org') EOL
          BASE_DOMAIN = os.getenv('BASE_DOMAIN', 'localhost:8000') #your docker machine ip if running on virtual server EOL
          MONGODB_HOST = os.getenv('MONGODB_HOST', 'srv-captain--$$cap_appname-mongodb') #your docker machine ip if running on virtual server EOL
          # CACHES = { EOL
          #     "default": { EOL
          #         "BACKEND": os.getenv('CACHE_BACKEND', "redis_cache.cache.RedisCache"), EOL
          #         "LOCATION": "LOCATION": os.getenv('CACHE_LOCATION', "127.0.0.1:6379:1") EOL
          #     } EOL
          # } EOL
          " |  sed "s/EOL /\n/g" >web/main/settings_local.py # The space after EOL is generated by yaml when process this multiline string
        #" >web/main/settings_local.py
        # - RUN echo $full_Script >> settings_local.py
        - RUN echo settings_local.py is && cat web/main/settings_local.py
        #- RUN python web/manage.py migrate
        - EXPOSE 8000
        - CMD ["python", "web/manage.py","runserver","0.0.0.0:8000"]
      containerHttpPort: '8000'
    volumes:
      - '$$cap_appname-data:/code'
caproverOneClickApp:
  variables:
  - id: $$cap_git_project
    label: Git Project
    defaultValue: 'https://github.com/arguman/arguman.org.git'
    description: |
      For private repos add the user/token here (ex:https://username:token@github.com/) or for github.com you can configure username/token.
      Get your github token from https://github.com/settings/tokens/new
    validRegex: /.{1,}/
  - id: $$cap_git_username
    label: Git Username
    defaultValue: ''
  - id: $$cap_git_access_token
    label: Git Access Token For Private Repos
    defaultValue: ''
    description:
  - id: $$cap_mongo_version
    label: MongoDB Version
    #defaultValue: '4.0.20'
    #defaultValue: '3.2.3'
    defaultValue: '3.6'
    description: Check out their docker page for the valid tags https://hub.docker.com/r/library/mongo/tags/ . Originally 3.2.3 was needed but
    validRegex: /^([^\s^\/])+$/
  - id: $$cap_POSTGRES_VERSION
    label: Version | PostgreSQL
    description: Version of PostgreSQL. Check out their Docker page for the valid tags https://hub.docker.com/_/postgres/tags
    defaultValue: 16.3
    validRegex: /.{1,}/
  - id: $$cap_POSTGRES_DB
    label: PostgreSQL | Name
    description: Name of the database.
    defaultValue: botpress
    validRegex: /.{1,}/
  - id: $$cap_POSTGRES_USER
    label: PostgreSQL | User
    description: Name of the database user.
    defaultValue: botpress
    validRegex: /.{1,}/
  - id: $$cap_POSTGRES_PASSWORD
    label: PostgreSQL | Password
    description: Password of the database user.
    defaultValue: $$cap_gen_random_hex(16)
    validRegex: /.{1,}/
  instructions:
    start: >-
      More details on https://github.com/arguman/arguman.org
    end: >-
      Arguman has been successfully deployed! It might take few moments before it's fully started.

      Before you can start using it, you need to perform some steps.
      You only need to do this once.
      **Please screenshot/copy the following instructions before proceeding:**

      1. Access your server via SSH
      2. Execute following command to trigger database migrations:
         - `docker exec -it $(docker ps --filter name=srv-captain--$$cap_appname-api -q) python manage.py migrate`
         - `docker exec -it $(docker ps --filter name=srv-captain--$$cap_appname-api -q) python manage.py createsuperuser`

      That's it!

      You can access the dashboard at `http://$$cap_appname.$$cap_root_domain`


      Aaaand you're done! ðŸ˜„
      Your service is available at http://$$cap_appname.$$cap_root_domain
  displayName: Arguman
  isOfficial: true
  description: Arguman is a platform for creating and sharing structured arguments.
  documentation: >-
    Originaly at https://arguman.org but the english database got lost.


# {
#   "captainVersion": "4",
#   "version": "3.3"
#   "services": {
#     "$$cap_appname": {
#           "image": "adminer:$$cap_adminer_version",
#           "containerHttpPort": "8080",
#           "environment": {
#               "ADMINER_DESIGN": "$$cap_adminer_design"
#           }
#     }
#   }
# }
